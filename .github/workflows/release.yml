name: Release

on:
  workflow_dispatch:
    inputs:
      make-release:
        description: 'Make a release'
        required: true
        default: 'false'
        type: boolean
      bump:
        description: 'Version bump type (applies if make-release is true)'
        required: true
        default: 'PATCH'
        type: choice
        options:
        - PATCH
        - MINOR
        - MAJOR
      publish-pypi:
        description: 'Publish to PyPI'
        required: true
        default: 'false'
        type: boolean
      publish-docs:
        description: 'Publish to GitHub Pages'
        required: true
        default: 'false'
        type: boolean

jobs:
  release:
    runs-on: ubuntu-latest
    environment: NearAI CI
    steps:

    - name: Generate a token
      id: generate-token
      uses: actions/create-github-app-token@v1.11.0
      with:
        app-id: ${{ secrets.APP_ID }}
        private-key: ${{ secrets.APP_PRIVATE_KEY }}

    - name: Ensure NearAIBot status
      run: |
        echo "${{ steps.generate-token.outputs.token }}" | gh auth login --with-token
        gh auth status
    
    - name: Get GitHub App User ID
      id: get-user-id
      run: echo "user-id=$(gh api "/users/${{ steps.generate-token.outputs.app-slug }}[bot]" --jq .id)" >> "$GITHUB_OUTPUT"
      env:
        GH_TOKEN: ${{ steps.generate-token.outputs.token }}

    - name: Set git user
      run: |
        git config --global user.name '${{ steps.app-token.outputs.app-slug }}[bot]'
        git config --global user.email '${{ steps.get-user-id.outputs.user-id }}+${{ steps.app-token.outputs.app-slug }}[bot]@users.noreply.github.com>'

    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ steps.generate-token.outputs.token }}
        persist-credentials: false

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.x'
        
    - name: Install poetry
      run: pipx install poetry

    - name: Install Codespell
      run: pip install codespell

    - name: Run Codespell
      run: codespell --config .codespellrc

    - name: check lock file for inconsistencies
      run: poetry check --lock

    - name: Install dependencies
      run: poetry install --extras explatform --extras hub

    - name: Lint Check
      run: ./scripts/lint_check.sh

    - name: Format Check
      run: ./scripts/format_check.sh

    - name: Type Check
      run: ./scripts/type_check.sh

    - name: Bump version and generate changelog
      uses: commitizen-tools/commitizen-action@master
      with:
        github_token: ${{ steps.generate-token.outputs.token }}
        changelog_increment_filename: body.md
        increment: ${{ github.event.inputs.bump }}
      env:
        GH_TOKEN: ${{ steps.generate-token.outputs.token }}
      if: ${{ github.event.inputs.make-release == 'true' }}
    
    - name: Create release
      uses: actions/create-release@v1
      with:
        tag_name: ${{ env.REVISION }}
        body_path: "body.md"
      env:
        GH_TOKEN: ${{ steps.generate-token.outputs.token }}
      if: ${{ github.event.inputs.make-release == 'true' }}
    
    - name: Build site
      run: ./scripts/build_mkdocs.sh
      if: ${{ github.event.inputs.publish-docs == 'true' }}
      
    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3.2.0
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./site
      if: ${{ github.event.inputs.publish-docs == 'true' }}
      
    - name: Build package
      run: poetry build
      if: ${{ github.event.inputs.publish-pypi == 'true' }}
      
    - name: Publish to PyPI
      run: poetry publish --build
      if: ${{ github.event.inputs.publish-pypi == 'true' }}